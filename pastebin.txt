package main

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
	"net/url"

	//"github.com/gin-gonic/gin"

	"context"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var temp *template.Template

func init() {
	temp = template.Must(template.ParseGlob("temps/index.html"))
}

func rootHandle(w http.ResponseWriter, r *http.Request) {
	temp.ExecuteTemplate(w, "index.html", nil)
}

func printLocal() {
	u, err := url.Parse("http://localhost:5050/")
	Check(err)
	fmt.Printf("%+v \n", u)
}

// func testShorten() {
// 	l1 := models.Shorten("https://example.com/")
// 	fmt.Println(l1.SH)
// }

func main() {
	// printLocal()

	// http.HandleFunc("/", rootHandle)
	// //serve css
	// fileServer := http.FileServer(http.Dir("styles"))
	// http.Handle("/styles/", http.StripPrefix("/styles", fileServer))
	// http.ListenAndServe(":5050", nil)

	// Use the SetServerAPIOptions() method to set the version of the Stable API on the client
	serverAPI := options.ServerAPI(options.ServerAPIVersion1)
	opts := options.Client().ApplyURI("mongodb+srv://testUser:OCMBJtQstHm9dhYr@cluster-go-short.c4w8kgt.mongodb.net/?retryWrites=true&w=majority&appName=Cluster-go-short").SetServerAPIOptions(serverAPI)

	// Create a new client and connect to the server
	client, err := mongo.Connect(context.TODO(), opts)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err = client.Disconnect(context.TODO()); err != nil {
			panic(err)
		}
	}()

	// Send a ping to confirm a successful connection
	if err := client.Database("admin").RunCommand(context.TODO(), bson.D{{"ping", 1}}).Err(); err != nil {
		panic(err)
	}
	fmt.Println("Pinged your deployment. You successfully connected to MongoDB!")

}

// handle error
func Check(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

//GIN API
package main

import (
	"example/go-short/internals/db"
	"example/go-short/models"
	"fmt"
	"log"
	"net/http"
	"os"


	"github.com/joho/godotenv"
)

// loads .env
func loadEnv() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
}

func main() {
	loadEnv()
	e := db.Init(os.Getenv("MONGO_KEY"), "cpd")
	Check(e)

	fmt.Println("Mongo Bongo")

	//returns till main() returns smth
	defer func() {
		Check(db.Disc())
	}()

	r := gin.Default()

	r.GET("/", getURL)
	r.Run("localhost:5050")
	fmt.Println("https://localhost:5050")

}

func getURL(c *gin.Context) {
	c.IndentedJSON(http.StatusOK, models.Shorten("https://example.com/"))
}

// handle error
func Check(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

//models.go

// type Store interface {
// 	SaveURL(Url Link) error
// 	GetID(ID string) (*Link, error)
// 	GetShID(ShortLink string) (*Link, error)
// }

//mongoclient

// func (l *URLList) ReplaceLinksByID(url_id string, link *models.Url) (int32, error){
// 	var links int32
// 	res, e := l.Collection.InsertOne(context.Background(), link)
// 	u.Check(e)
// 	return links, nil

// }

// var client *mongo.Client

// func Init(mongoKey string, dbs string) error {
// 	//creates mongo client
// 	serverAPI := options.ServerAPI(options.ServerAPIVersion1)
// 	opts := options.Client().ApplyURI(mongoKey).SetServerAPIOptions(serverAPI)
// 	local, err := mongo.Connect(context.Background(), opts)
// 	u.Check(err)

// 	client = local

// 	err = client.Database("admin").RunCommand(context.TODO(), bson.D{{Key: "ping", Value: 1}}).Err()
// 	u.Check(err)

// 	return err
// }

// func Disc() error {
// 	return client.Disconnect(context.Background())
// }


IMPORTANT!!!!!!!!!!!

{{ if len .Count | eq 0 }}
            <tr class="table-row">
                <td
                class="border dark:border-green border-green py-2 pl-4 text-center rounded-sm text-green">
                No Entries
                </td>
            </tr>
            {{ end }}
            {{/* Iterate over the existing URL data */}}
            {{ range .List }}
            <tr>
                <td
                    class="border dark:border-green border-green py-2 pl-4 text-center rounded-sm text-green">
                    <a href="localhost:8080/gs/{{ .ID }}" target="_blank"
                        class="hover:underline underline-offset-4 decoration-2 decoration-blue-500 dark:decoration-slate-500">localhost:8080/gs/{{ .ShortLink }}</a>
                </td>
                
            </tr>

            {{ end }}


{{range .IDList}}
            <tr>
                <th
                class=" rounded-sm px-4 py-2 text-center dark:border-green dark:border-2 bg-green dark:bg-green dark:text-white text-white">
                    <a class="table-cell lg:max-w-2xl" title="{{ .IDList }}">{{.IDList}}</a>
                </th>
                <th
                    class=" rounded-sm px-4 py-2 text-center dark:border-green dark:border-2 bg-green dark:bg-green dark:text-white text-white">
                    <a href="/gs?url={{ .ShortLinkList }}" target="_blank"
                       class="hover:underline underline-offset-4 decoration-2 decoration-blue-500 dark:decoration-slate-500">
                       {{.ShortLinkList }}</a>
            </tr>

